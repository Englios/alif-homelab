apiVersion: apps/v1
kind: Deployment
metadata:
  name: minecraft-dns-updater
  namespace: minecraft
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minecraft-dns-updater
  template:
    metadata:
      labels:
        app: minecraft-dns-updater
    spec:
      serviceAccountName: minecraft-dns-updater
      containers:
      - name: dns-updater
        image: alpine/k8s:1.30.13
        command: ["/bin/sh"]
        args: 
          - -c
          - |
            echo "‚úÖ Using preinstalled tools: curl, jq, kubectl"
            
            echo "üöÄ Starting DNS Updater for $BORE_SERVER_TYPE server at $BORE_SERVER_IP"
            
            # Function to get current bore port
            get_bore_port() {
                case "$BORE_SERVER_TYPE" in
                    "digitalocean")
                        kubectl logs -n minecraft -l app=minecraft-bore-tunnel --tail=20 2>/dev/null | \
                        grep "listening at $BORE_SERVER_IP:" | \
                        tail -1 | \
                        sed "s/.*listening at $BORE_SERVER_IP:\([0-9]*\).*/\1/"
                        ;;
                    "homelab")
                        kubectl logs -n infrastructure -l app=bore-server --tail=10 2>/dev/null | \
                        grep "new client host=0.0.0.0 port=" | \
                        tail -1 | \
                        sed 's/.*port=\([0-9]*\).*/\1/'
                        ;;
                    *)
                        echo "ERROR: Unknown bore server type: $BORE_SERVER_TYPE" >&2
                        return 1
                        ;;
                esac
            }
            
            # Function to update DNS records
            update_dns_records() {
                local port=$1
                echo "üîÑ Updating DNS records for port $port"
                
                # Update A record
                echo "üìç Updating A record: $MINECRAFT_DOMAIN -> $BORE_SERVER_IP"
                A_RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records?type=A&name=$MINECRAFT_DOMAIN" \
                    -H "Authorization: Bearer $CF_API_TOKEN" \
                    -H "Content-Type: application/json" 2>/dev/null | \
                    jq -r '.result[0].id // empty' 2>/dev/null || echo "")
                
                A_DATA="{\"type\": \"A\", \"name\": \"$A_RECORD_NAME\", \"content\": \"$BORE_SERVER_IP\", \"ttl\": $DNS_TTL}"
                
                if [ -n "$A_RECORD_ID" ] && [ "$A_RECORD_ID" != "null" ]; then
                    curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records/$A_RECORD_ID" \
                        -H "Authorization: Bearer $CF_API_TOKEN" \
                        -H "Content-Type: application/json" \
                        -d "$A_DATA" > /dev/null
                    echo "‚úÖ A record updated"
                else
                    curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records" \
                        -H "Authorization: Bearer $CF_API_TOKEN" \
                        -H "Content-Type: application/json" \
                        -d "$A_DATA" > /dev/null
                    echo "‚úÖ A record created"
                fi
                
                # Update standard Minecraft SRV record
                echo "üéØ Updating SRV record: $SRV_RECORD_NAME.$BASE_DOMAIN -> port $port"
                STANDARD_RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records?type=SRV&name=$SRV_RECORD_NAME.$BASE_DOMAIN" \
                    -H "Authorization: Bearer $CF_API_TOKEN" \
                    -H "Content-Type: application/json" | \
                    jq -r '.result[0].id // empty')
                
                STANDARD_SRV_DATA="{\"type\": \"SRV\", \"name\": \"$SRV_RECORD_NAME\", \"data\": {\"priority\": $SRV_PRIORITY, \"weight\": $SRV_WEIGHT, \"port\": $port, \"target\": \"$MINECRAFT_DOMAIN\"}, \"ttl\": $DNS_TTL}"
                
                if [ -n "$STANDARD_RECORD_ID" ] && [ "$STANDARD_RECORD_ID" != "null" ]; then
                    curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records/$STANDARD_RECORD_ID" \
                        -H "Authorization: Bearer $CF_API_TOKEN" \
                        -H "Content-Type: application/json" \
                        -d "$STANDARD_SRV_DATA" > /dev/null
                    echo "‚úÖ Standard SRV record updated"
                else
                    curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records" \
                        -H "Authorization: Bearer $CF_API_TOKEN" \
                        -H "Content-Type: application/json" \
                        -d "$STANDARD_SRV_DATA" > /dev/null
                    echo "‚úÖ Standard SRV record created"
                fi
                
                # Update custom SRV record
                echo "üéØ Updating custom SRV record: $CUSTOM_SRV_NAME.$BASE_DOMAIN -> port $port"
                CUSTOM_RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records?type=SRV&name=$CUSTOM_SRV_NAME.$BASE_DOMAIN" \
                    -H "Authorization: Bearer $CF_API_TOKEN" \
                    -H "Content-Type: application/json" | \
                    jq -r '.result[0].id // empty')
                
                CUSTOM_SRV_DATA="{\"type\": \"SRV\", \"name\": \"$CUSTOM_SRV_NAME\", \"data\": {\"priority\": $SRV_PRIORITY, \"weight\": $SRV_WEIGHT, \"port\": $port, \"target\": \"$MINECRAFT_DOMAIN\"}, \"ttl\": $DNS_TTL}"
                
                if [ -n "$CUSTOM_RECORD_ID" ] && [ "$CUSTOM_RECORD_ID" != "null" ]; then
                    curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records/$CUSTOM_RECORD_ID" \
                        -H "Authorization: Bearer $CF_API_TOKEN" \
                        -H "Content-Type: application/json" \
                        -d "$CUSTOM_SRV_DATA" > /dev/null
                    echo "‚úÖ Custom SRV record updated"
                else
                    curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records" \
                        -H "Authorization: Bearer $CF_API_TOKEN" \
                        -H "Content-Type: application/json" \
                        -d "$CUSTOM_SRV_DATA" > /dev/null
                    echo "‚úÖ Custom SRV record created"
                fi
                
                echo "üéâ DNS update complete! Players can connect via $MINECRAFT_DOMAIN"
            }
            
            # Main monitoring loop
            LAST_PORT=""
            CHECK_INTERVAL=30
            
            while true; do
                echo "üîç Checking for tunnel port changes..."
                
                CURRENT_PORT=$(get_bore_port)
                
                if [ -n "$CURRENT_PORT" ] && [ "$CURRENT_PORT" != "" ]; then
                    echo "üì° Found $BORE_SERVER_TYPE tunnel on port $CURRENT_PORT"
                    
                    # Update DNS if port changed
                    if [ "$CURRENT_PORT" != "$LAST_PORT" ]; then
                        if [ -n "$LAST_PORT" ]; then
                            echo "üîÑ Port changed from $LAST_PORT to $CURRENT_PORT"
                        else
                            echo "üÜï Initial port detected: $CURRENT_PORT"
                        fi
                        update_dns_records "$CURRENT_PORT"
                        LAST_PORT="$CURRENT_PORT"
                    else
                        echo "‚úÖ Port $CURRENT_PORT unchanged, DNS up to date"
                    fi
                else
                    echo "‚ö†Ô∏è  No active $BORE_SERVER_TYPE tunnel port found"
                fi
                
                echo "üí§ Sleeping for $CHECK_INTERVAL seconds..."
                sleep $CHECK_INTERVAL
            done
        env:
        - name: CF_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: cloudflare-dns-secret
              key: api-token
        - name: CF_ZONE_ID
          valueFrom:
            secretKeyRef:
              name: cloudflare-dns-secret
              key: zone-id
        - name: BORE_SERVER_IP
          valueFrom:
            secretKeyRef:
              name: bore-server-config
              key: server-ip
        - name: BORE_SERVER_TYPE
          valueFrom:
            secretKeyRef:
              name: bore-server-config
              key: server-type
        # DNS Configuration from ConfigMap
        - name: MINECRAFT_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: MINECRAFT_DOMAIN
        - name: MINECRAFT_SUBDOMAIN
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: MINECRAFT_SUBDOMAIN
        - name: BASE_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: BASE_DOMAIN
        - name: A_RECORD_NAME
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: A_RECORD_NAME
        - name: SRV_RECORD_NAME
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: SRV_RECORD_NAME
        - name: CUSTOM_SRV_NAME
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: CUSTOM_SRV_NAME
        - name: DNS_TTL
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: DNS_TTL
        - name: SRV_PRIORITY
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: SRV_PRIORITY
        - name: SRV_WEIGHT
          valueFrom:
            configMapKeyRef:
              name: minecraft-dns-config
              key: SRV_WEIGHT
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minecraft-dns-updater
  namespace: minecraft

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: minecraft
  name: minecraft-dns-updater
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: infrastructure
  name: minecraft-dns-updater-infrastructure
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minecraft-dns-updater
  namespace: minecraft
subjects:
- kind: ServiceAccount
  name: minecraft-dns-updater
  namespace: minecraft
roleRef:
  kind: Role
  name: minecraft-dns-updater
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minecraft-dns-updater-infrastructure
  namespace: infrastructure
subjects:
- kind: ServiceAccount
  name: minecraft-dns-updater
  namespace: minecraft
roleRef:
  kind: Role
  name: minecraft-dns-updater-infrastructure
  apiGroup: rbac.authorization.k8s.io 