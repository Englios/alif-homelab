apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: minecraft-server-vpa
  namespace: minecraft
  labels:
    app: minecraft-server
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: minecraft-server
  updatePolicy:
    updateMode: "Initial" # Changed from "Auto" - only apply on pod creation, no restarts
  resourcePolicy:
    containerPolicies:
    - containerName: minecraft
      # More conservative bounds based on actual usage
      minAllowed:
        memory: "8Gi" # Realistic minimum based on current usage
        cpu: "500m" # Lower CPU minimum - server rarely uses much
      maxAllowed:
        memory: "12Gi" # Reasonable maximum that prevents runaway allocation
        cpu: "3000m" # Reduced max CPU - more realistic
      # Scaling behavior
      controlledResources: [ "cpu", "memory" ]
      controlledValues: RequestsAndLimits
---
# VPA Monitoring ServiceMonitor (if using Prometheus)
apiVersion: v1
kind: Service
metadata:
  name: minecraft-server-metrics
  namespace: minecraft
  labels:
    app: minecraft-server
    monitor: vpa
spec:
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
  selector:
    app: minecraft-server
  type: ClusterIP
---
# ConfigMap for VPA tuning
apiVersion: v1
kind: ConfigMap
metadata:
  name: vpa-tuning-config
  namespace: minecraft
data:
  # VPA tuning parameters - More conservative approach
  memory-threshold: "75" # Scale up when memory usage > 75% (was 85%)
  cpu-threshold: "70" # Scale up when CPU usage > 70% (was 80%)
  scale-down-delay: "900s" # Wait 15 minutes before scaling down (was 5)
  scale-up-delay: "180s" # Scale up after 3 minutes (was 1)

  # Minecraft-specific tuning notes
  usage-patterns: |
    # CURRENT SITUATION ANALYSIS:
    # - VPA increased memory from 8GB â†’ 18GB limit
    # - Server now uses ~12GB (due to available memory)
    # - Actual working memory is ~9-10GB
    # - CPU usage typically <500m
    
    # CONSERVATIVE STRATEGY:
    # - Set realistic bounds: 8-12GB memory, 500m-3000m CPU
    # - Use "Initial" mode to prevent disruptive restarts
    # - Monitor actual usage vs allocation efficiency
    # - Java heap should be ~70% of container memory limit
    
    # MEMORY BREAKDOWN (typical modded server):
    # - Java heap: ~8GB (MEMORY env var)
    # - JVM overhead: ~1-2GB
    # - Container overhead: ~500MB-1GB
    # - Total: ~10-12GB reasonable maximum
